{"version":3,"sources":["ng://angular-highcharts/lib/chart.ts","ng://angular-highcharts/lib/mapchart.ts","ng://angular-highcharts/lib/stockchart.ts","ng://angular-highcharts/lib/chart.directive.ts","ng://angular-highcharts/lib/chart.service.ts","ng://angular-highcharts/lib/chart.module.ts"],"names":["Chart","options","series","this","refSubject","AsyncSubject","ref$","asObservable","prototype","addPoint","point","serieIndex","redraw","shift","subscribe","chart","length","addSeries","animation","removePoint","pointIndex","data","removeSeries","seriesIndex","remove","init","el","_this","ref","Highcharts.chart","nativeElement","next","complete","destroy","undefined","MapChart","Highcharts.mapChart","StockChart","Highcharts.stockChart","ChartDirective","ngOnChanges","changes","isFirstChange","ngOnInit","ngOnDestroy","Directive","args","selector","ElementRef","Input","HIGHCHARTS_MODULES","InjectionToken","ChartService","chartModules","initModules","forEach","chartModule","Highcharts","Injectable","Inject","ChartModule","cs","NgModule","exports","declarations","providers","provide","useValue","Éµ0"],"mappings":"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","sourcesContent":["import { ElementRef } from '@angular/core';\nimport * as Highcharts from 'highcharts';\nimport { AsyncSubject, Observable } from 'rxjs';\n\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n * @author Felix Itzenplitz\n * @author Timothy A. Perez (contributor)\n */\nexport type Point = number | [number, number] | Highcharts.Point;\n\nexport class Chart {\n  private refSubject: AsyncSubject<Highcharts.Chart> = new AsyncSubject();\n  ref$: Observable<Highcharts.Chart> = this.refSubject.asObservable();\n  ref: Highcharts.Chart;\n\n  constructor(private options: Highcharts.Options = { series: [] }) {}\n\n  /**\n   * Add Point\n   * @param point         Highcharts.DataPoint, number touple or number\n   * @param serieIndex    Index position of series. This defaults to 0.\n   * @param redraw        Flag whether or not to redraw point. This defaults to true.\n   * @param shift         Shift point to the start of series. This defaults to false.\n   */\n  addPoint(point: Point, serieIndex: number = 0, redraw: boolean = true, shift: boolean = false): void {\n    this.ref$.subscribe(chart => {\n      if (chart.series.length > serieIndex) {\n        chart.series[serieIndex].addPoint(point, redraw, shift);\n      }\n    });\n  }\n\n  /**\n   * Add Series\n   * @param series        Series Configuration\n   * @param redraw        Flag whether or not to redraw series. This defaults to true.\n   * @param animation     Whether to apply animation, and optionally animation configuration. This defaults to false.\n   */\n  addSeries(series: Highcharts.SeriesOptionsType, redraw = true, animation: boolean): void {\n    this.ref$.subscribe(chart => {\n      chart.addSeries(series, redraw, animation);\n    });\n  }\n\n  /**\n   * Remove Point\n   * @param pointIndex    Index of Point\n   * @param serieIndex    Specified Index of Series. Defaults to 0.\n   */\n  removePoint(pointIndex: number, serieIndex = 0): void {\n    this.ref$.subscribe(chart => {\n      if (chart.series.length > serieIndex && chart.series[serieIndex].data.length > pointIndex) {\n        chart.series[serieIndex].removePoint(pointIndex, true);\n      }\n    });\n  }\n\n  /**\n   * Remove Series\n   * @param seriesIndex    Index position of series to remove.\n   */\n  removeSeries(seriesIndex: number): void {\n    this.ref$.subscribe(chart => {\n      if (chart.series.length > seriesIndex) {\n        chart.series[seriesIndex].remove(true);\n      }\n    });\n  }\n\n  init(el: ElementRef): void {\n    if (!this.ref) {\n      Highcharts.chart(el.nativeElement, this.options, chart => {\n        this.refSubject.next(chart);\n        this.ref = chart;\n        this.refSubject.complete();\n      });\n    }\n  }\n\n  destroy() {\n    if (this.ref) {\n      this.options = this.ref.options;\n      this.ref.destroy();\n      this.ref = undefined;\n\n      // new init subject\n      this.refSubject = new AsyncSubject();\n      this.ref$ = this.refSubject.asObservable();\n    }\n  }\n}\n","import { ElementRef } from '@angular/core';\nimport * as Highcharts from 'highcharts';\nimport * as Highmaps from 'highcharts/highmaps';\nimport { AsyncSubject, Observable } from 'rxjs';\n\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */\nexport class MapChart {\n  private refSubject: AsyncSubject<Highmaps.Chart> = new AsyncSubject();\n  ref$: Observable<Highmaps.Chart> = this.refSubject.asObservable();\n  ref: Highmaps.Chart;\n\n  constructor(private options: Highmaps.Options = { series: [] }) {}\n\n  init(el: ElementRef): void {\n    if (!this.ref) {\n      Highcharts.mapChart(el.nativeElement, this.options, chart => {\n        this.refSubject.next(chart);\n        this.ref = chart;\n        this.refSubject.complete();\n      });\n    }\n  }\n\n  destroy() {\n    if (this.ref) {\n      this.options = this.ref.options;\n      this.ref.destroy();\n      this.ref = undefined;\n\n      // new init subject\n      this.refSubject = new AsyncSubject();\n      this.ref$ = this.refSubject.asObservable();\n    }\n  }\n}\n","import { ElementRef } from '@angular/core';\nimport * as Highcharts from 'highcharts';\nimport * as Highstock from 'highcharts/highstock';\nimport { AsyncSubject, Observable } from 'rxjs';\n\n\n/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n *\n * @author Felix Itzenplitz\n * @author Timothy A. Perez (contributor)\n */\nexport class StockChart {\n  private refSubject: AsyncSubject<Highstock.Chart> = new AsyncSubject();\n  ref$: Observable<Highstock.Chart> = this.refSubject.asObservable();\n  ref: Highstock.Chart;\n  constructor(private options: Highstock.Options = { series: [] }) {}\n\n  init(el: ElementRef): void {\n    if (!this.ref) {\n      Highcharts.stockChart(el.nativeElement, this.options, chart => {\n        this.refSubject.next(chart);\n        this.ref = chart;\n        this.refSubject.complete();\n      });\n    }\n  }\n\n  destroy() {\n    if (this.ref) {\n      this.options = this.ref.options;\n      this.ref.destroy();\n      this.ref = undefined;\n\n      // new init subject\n      this.refSubject = new AsyncSubject();\n      this.ref$ = this.refSubject.asObservable();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */\nimport { Directive, ElementRef, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { Chart } from './chart';\nimport { MapChart } from './mapchart';\nimport { StockChart } from './stockchart';\n\n@Directive({\n  selector: '[chart]'\n})\nexport class ChartDirective implements OnInit, OnDestroy, OnChanges {\n  @Input() chart: Chart | StockChart | MapChart;\n\n  constructor(private el: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!changes.chart.isFirstChange()) {\n      this.destroy();\n      this.init();\n    }\n  }\n\n  ngOnInit() {\n    this.init();\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n  private init() {\n    if (this.chart instanceof Chart || this.chart instanceof StockChart || this.chart instanceof MapChart) {\n      this.chart.init(this.el);\n    }\n  }\n\n  private destroy() {\n    if (this.chart instanceof Chart || this.chart instanceof StockChart || this.chart instanceof MapChart) {\n      this.chart.destroy();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */\nimport { Inject, Injectable, InjectionToken } from '@angular/core';\nimport * as Highcharts from 'highcharts';\n\nexport let HIGHCHARTS_MODULES = new InjectionToken<any[]>('HighchartsModules');\n\n@Injectable()\nexport class ChartService {\n  constructor(@Inject(HIGHCHARTS_MODULES) private chartModules: any[]) { }\n\n  initModules() {\n    this.chartModules.forEach(chartModule => {\n      chartModule(Highcharts);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Felix Itzenplitz. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at\n * https://github.com/cebor/angular-highcharts/blob/master/LICENSE\n */\nimport { NgModule } from '@angular/core';\nimport { ChartDirective } from './chart.directive';\nimport { ChartService, HIGHCHARTS_MODULES } from './chart.service';\n\n@NgModule({\n  exports: [ChartDirective],\n  declarations: [ChartDirective],\n  providers: [\n    { provide: HIGHCHARTS_MODULES, useValue: [] },\n    ChartService\n  ]\n})\nexport class ChartModule {\n  constructor(private cs: ChartService) {\n    this.cs.initModules();\n  }\n}\n"]}